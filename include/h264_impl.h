/*
 *  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 *
 * WEBRTC H264 wrapper interface
 */

#ifndef WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_IMPL_H_
#define WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_IMPL_H_

#include "h264_interface.h"
/* New H264 Codec wrapper headers */
#include "x264Encoder.h"
#include "x264.h"
#include "ffmpeg-h264-decoder.h"
#include "h264_vt_encoder.h"

namespace webrtc {
	class H264EncoderImpl : public H264Encoder {
public:
	//static H264EncoderImpl* Create();
	H264EncoderImpl();
    virtual ~H264EncoderImpl();

	// Free encoder memory.
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int Release();
        
    // Initialize the encoder with the information from the codecSettings
    //
    // Input:
    //          - codec_settings    : Codec settings
    //          - number_of_cores   : Number of cores available for the encoder
    //          - max_payload_size  : The maximum size each payload is allowed
    //                                to have. Usually MTU - overhead.
    //
    // Return value                 : Set bit rate if OK
    //                                <0 - Errors:
    //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
    //                                  WEBRTC_VIDEO_CODEC_ERR_SIZE
    //                                  WEBRTC_VIDEO_CODEC_LEVEL_EXCEEDED
    //                                  WEBRTC_VIDEO_CODEC_MEMORY
    //                                  WEBRTC_VIDEO_CODEC_ERROR
    virtual int InitEncode(const VideoCodec* codec_settings,
                               int number_of_cores,
                               size_t max_payload_size);
        
    // Encode an I420 image (as a part of a video stream). The encoded image
    // will be returned to the user through the encode complete callback.
    //
    // Input:
    //          - input_image       : Image to be encoded
    //          - frame_types       : Frame type to be generated by the encoder.
    //
    // Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
    //                                <0 - Errors:
    //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
    //                                  WEBRTC_VIDEO_CODEC_MEMORY
    //                                  WEBRTC_VIDEO_CODEC_ERROR
    //                                  WEBRTC_VIDEO_CODEC_TIMEOUT
        
	virtual int Encode(const I420VideoFrame& input_image,
                           const CodecSpecificInfo* codec_specific_info,
						   const std::vector<VideoFrameType>* frame_types);
        
    // Register an encode complete callback object.
    //
    // Input:
    //          - callback         : Callback object which handles encoded images.
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int RegisterEncodeCompleteCallback(EncodedImageCallback* callback);
        
    // Inform the encoder of the new packet loss rate and the round-trip time of
    // the network.
    //
    //          - packet_loss : Fraction lost
    //                          (loss rate in percent = 100 * packetLoss / 255)
    //          - rtt         : Round-trip time in milliseconds
    // Return value           : WEBRTC_VIDEO_CODEC_OK if OK
    //                          <0 - Errors: WEBRTC_VIDEO_CODEC_ERROR
    //
    //virtual int SetChannelParameters(uint32_t packet_loss, int rtt);
	virtual int32_t SetChannelParameters(uint32_t packet_loss, int64_t rtt);

    // Inform the encoder about the new target bit rate.
    //
    //          - new_bitrate_kbit : New target bit rate
    //          - frame_rate       : The target frame rate
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int SetRates(uint32_t new_bitrate_kbit, uint32_t frame_rate);
        
private:
    //H264EncoderImpl();

    // Update frame size for codec.
	int UpdateCodecFrameSize(uint32_t input_image_width,
		uint32_t input_image_height);
        
	//int GetEncodedFrame(const I420VideoFrame& input_image);
	int GetEncodedPartitions(const I420VideoFrame& input_image);

    EmFrameType getFrameType(int frameNum,int gop,int gfgop,int spgop);
    
    CX264Encoder *encoder_;
    X264ENCPARAM *config_;
	x264_nal_t  *nal_info_;
	int i_nal;
    EmFrameType  frame_type_;
    uint8_t      *rawY_;
	uint8_t      *rawU_;
	uint8_t      *rawV_;
    uint32_t     frame_num_;
	long        frame_size;
	uint32_t rawY_stride;
	uint32_t rawUV_stride;
    uint8_t      *buf_enc_;
	VQQLONG      buf_len_;

    EncodedImage encoded_image_;
        
    EncodedImageCallback* encoded_complete_callback_;
    VideoCodec codec_;
    
    bool first_frame_encoded_;
    bool inited_;
    uint32_t timestamp_;

// video tools 
    H264VideoToolboxEncoder* vtEncoder;


};  // end of VP8Encoder class

#if 1
class H264DecoderImpl : public H264Decoder {
public:
    enum {
        MAX_ENC_SIZE      = 480*640*3/2,
        MAX_ENC_WIDTH     = 640,
        MAX_ENC_HEIGHT    = 480
    };
	H264DecoderImpl();
    
   // static H264DecoderImpl* Create();
        
    virtual ~H264DecoderImpl();
    
    // Initialize the decoder.
    //
    // Return value         :  WEBRTC_VIDEO_CODEC_OK.
    //                        <0 - Errors:
    //                                  WEBRTC_VIDEO_CODEC_ERROR
    virtual int InitDecode(const VideoCodec* inst, int number_of_cores);
        
    // Decode encoded image (as a part of a video stream). The decoded image
    // will be returned to the user through the decode complete callback.
    //
    // Input:
    //          - input_image         : Encoded image to be decoded
    //          - missing_frames      : True if one or more frames have been lost
    //                                  since the previous decode call.
    //          - fragmentation       : Specifies the start and length of each VP8
    //                                  partition.
    //          - codec_specific_info : pointer to specific codec data
    //          - render_time_ms      : Render time in Ms
    //
    // Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
    //                                <0 - Errors:
    //                                      WEBRTC_VIDEO_CODEC_ERROR
    //                                      WEBRTC_VIDEO_CODEC_ERR_PARAMETER
    virtual int Decode(const EncodedImage& input_image,
                        bool missing_frames,
                        const RTPFragmentationHeader* fragmentation,
                        const CodecSpecificInfo* codec_specific_info,
                        int64_t /*render_time_ms*/);
        
    // Register a decode complete callback object.
    //
    // Input:
    //          - callback         : Callback object which handles decoded images.
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
    virtual int RegisterDecodeCompleteCallback(DecodedImageCallback* callback);
    
    // Free decoder memory.
    //
    // Return value                : WEBRTC_VIDEO_CODEC_OK if OK
    //                               <0 - Errors:
    //                                      WEBRTC_VIDEO_CODEC_ERROR
    virtual int Release();
    
    // Reset decoder state and prepare for a new call.
    //
    // Return value         : WEBRTC_VIDEO_CODEC_OK.
    //                        <0 - Errors:
    //                                  WEBRTC_VIDEO_CODEC_UNINITIALIZED
    //                                  WEBRTC_VIDEO_CODEC_ERROR
    virtual int Reset();
        
    // Create a copy of the codec and its internal state.
    //
    // Return value                : A copy of the instance if OK, NULL otherwise.
    virtual VideoDecoder* Copy();

	virtual int32_t RotateDecodedFrame(const int rotation);
	virtual int32_t SetDecodeFrame(float scale);
private:
    
    void                    *decoder_;
    uint8_t                 *buf_dec_;
    uint8_t                 *yuv_dec_;
	int32_t                  yuv_size;
    
	I420VideoFrame          *decoded_image_;
    DecodedImageCallback    *decode_complete_callback_;
    bool                    inited_;
    VideoCodec              codec_;
    EncodedImage            last_keyframe_;
	int                     _rotation;
	float                   _scale;
	int                     _numerator;
};  // end of H264Decoder class
#endif

}  // namespace webrtc

#endif  // WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_IMPL_H_
